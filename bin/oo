#!/usr/bin/env lua

local Parser = require 'argparse'
local inspect = require 'inspect'
local oo = require 'lib/oo'
local json = require 'dkjson'

local cli = Parser "oo"
cli:description('handy tool for working with OO spring defs')
cli:command_target("command")
cli:option("-d --dir", "directory to search for defs", 'defs')
cli:option("-f --format", "output format (json or lua)", 'lua')

local render = cli:command('render', 'render a class into a its full form')
render:argument("class")

local users = cli:command('users', 'show users of a given class/tag')
users:argument("class")

local trace = cli:command('trace', 'show source for each tag of a class')
trace:argument("class")

local unused = cli:command('unused', 'find abstract classes with no users')

local function output(table, format)
	if format == 'lua' then
		print(inspect(table))
	elseif format == 'json' then
		print(json.encode(table))
	else
		print('unknown output format', format)
	end
end

local args, err = cli:parse()

local action = {
	trace = function (args)
		output(oo.trace(args.class), args.format)
	end,
	render = function (args)
		output(oo.render(args.class), args.format)
	end,
	users = function (args)
		output(oo.users(args.class), args.format)
	end,
	unused = function (args)
		output(oo.unused(), args.format)
	end
}

if args.command then
	oo.crawlDir(args.dir)
	action[args.command](args)
end
